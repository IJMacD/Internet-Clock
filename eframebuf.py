import framebuf

font = bytearray([
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # SPACE
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # !
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # "
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # #
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # $
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # %
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # &
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # '
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # (
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # )
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # *
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # +
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # ,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # -
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, # .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # /
	0x05, 0x60, 0x90, 0x90, 0x90, 0x90, 0x60, 0x00, # 0
	0x05, 0x60, 0xA0, 0x20, 0x20, 0x20, 0xF0, 0x00, # 1
	0x05, 0x60, 0x90, 0x20, 0x40, 0x80, 0xF0, 0x00, # 2
	0x05, 0x60, 0x90, 0x20, 0x20, 0x90, 0x60, 0x00, # 3
	0x05, 0x20, 0x40, 0x80, 0xA0, 0xF0, 0x20, 0x00, # 4
	0x05, 0xF0, 0x80, 0xE0, 0x10, 0x10, 0xE0, 0x00, # 5
	0x05, 0x20, 0x40, 0xE0, 0x90, 0x90, 0x60, 0x00, # 6
	0x05, 0xF0, 0x10, 0x20, 0x40, 0x80, 0x80, 0x00, # 7
	0x05, 0x60, 0x90, 0x60, 0x90, 0x90, 0x60, 0x00, # 8
	0x05, 0x60, 0x90, 0x90, 0x70, 0x10, 0x10, 0x00, # 9
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # :
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # ;
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # <
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # =
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # >
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # ?
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # @
	0x05, 0x60, 0x90, 0xF0, 0x90, 0x90, 0x90, 0x00, # A
	0x05, 0xE0, 0x90, 0xE0, 0x90, 0x90, 0xE0, 0x00, # B
	0x05, 0x60, 0x90, 0x80, 0x80, 0x90, 0x60, 0x00, # C
	0x05, 0xE0, 0x90, 0x90, 0x90, 0x90, 0xE0, 0x00, # D
	0x05, 0xF0, 0x80, 0xE0, 0x80, 0x80, 0xF0, 0x00, # E
	0x05, 0xF0, 0x80, 0xE0, 0x80, 0x80, 0x80, 0x00, # F
	0x05, 0x60, 0x90, 0x80, 0xB0, 0x90, 0x60, 0x00, # G
	0x05, 0x90, 0x90, 0xF0, 0x90, 0x90, 0x90, 0x00, # H
	0x04, 0xE0, 0x40, 0x40, 0x40, 0x40, 0xE0, 0x00, # I
	0x05, 0xF0, 0x20, 0x20, 0x20, 0xA0, 0x40, 0x00, # J
	0x05, 0x90, 0xA0, 0xC0, 0xA0, 0x90, 0x90, 0x00, # K
	0x05, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF0, 0x00, # L
	0x07, 0x84, 0xCC, 0xB4, 0x84, 0x84, 0x84, 0x00, # M
	0x05, 0x90, 0xD0, 0xD0, 0xB0, 0xB0, 0x90, 0x00, # N
	0x06, 0x70, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, # O
	0x05, 0xE0, 0x90, 0x90, 0xE0, 0x80, 0x80, 0x00, # P
	0x06, 0x70, 0x88, 0x88, 0xA8, 0x90, 0x68, 0x00, # Q
	0x05, 0xE0, 0x90, 0xE0, 0x90, 0x90, 0x90, 0x00, # R
	0x05, 0x70, 0x80, 0x60, 0x10, 0x10, 0xE0, 0x00, # S
	0x06, 0xF8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, # T
	0x05, 0x90, 0x90, 0x90, 0x90, 0x90, 0x60, 0x00, # U
	0x06, 0x88, 0x88, 0x88, 0x88, 0x50, 0x20, 0x00, # V
	0x07, 0x84, 0x84, 0x84, 0xB4, 0x48, 0x48, 0x00, # W
	0x05, 0x90, 0x90, 0x60, 0x60, 0x90, 0x90, 0x00, # X
	0x06, 0x88, 0x50, 0x20, 0x20, 0x20, 0x20, 0x00, # Y
	0x05, 0xF0, 0x10, 0x20, 0x40, 0x80, 0xF0, 0x00, # Z
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # [
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # \
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # ]
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # ^
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # _
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # `
	0x05, 0x00, 0x00, 0x70, 0x90, 0x90, 0x70, 0x00, # a
	0x05, 0x80, 0x80, 0xE0, 0x90, 0x90, 0xE0, 0x00, # b
	0x05, 0x00, 0x00, 0x70, 0x80, 0x80, 0x70, 0x00, # c
	0x05, 0x10, 0x10, 0x70, 0x90, 0x90, 0x70, 0x00, # d
	0x05, 0x00, 0x00, 0x60, 0x90, 0xE0, 0x80, 0x70, # e
	0x05, 0x20, 0x50, 0x40, 0xE0, 0x40, 0x40, 0x00, # f
	0x05, 0x00, 0x00, 0x60, 0x90, 0x70, 0x10, 0xE0, # g
	0x05, 0x00, 0x80, 0x80, 0xE0, 0x90, 0x90, 0x00, # h
	0x02, 0x00, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, # i
	0x03, 0x00, 0x40, 0x00, 0x40, 0x40, 0x40, 0x80, # j
	0x05, 0x00, 0x80, 0xA0, 0xC0, 0xA0, 0x90, 0x00, # k
	0x04, 0x00, 0xC0, 0x40, 0x40, 0x40, 0xE0, 0x00, # l
	0x06, 0x00, 0x00, 0x50, 0xA8, 0xA8, 0xA8, 0x00, # m
	0x05, 0x00, 0x00, 0xE0, 0x90, 0x90, 0x90, 0x00, # n
	0x05, 0x00, 0x00, 0x60, 0x90, 0x90, 0x60, 0x00, # o
	0x05, 0x00, 0x00, 0xE0, 0x90, 0x90, 0xE0, 0x80, # p
	0x05, 0x00, 0x00, 0x70, 0x90, 0x90, 0x70, 0x10, # q
	0x05, 0x00, 0x00, 0xE0, 0x90, 0x80, 0x80, 0x00, # r
	0x05, 0x00, 0x00, 0x70, 0x80, 0x60, 0x10, 0xE0, # s
	0x04, 0x00, 0x00, 0x40, 0xE0, 0x40, 0x40, 0x60, # t
	0x05, 0x00, 0x00, 0x90, 0x90, 0x90, 0x70, 0x00, # u
	0x05, 0x00, 0x00, 0x90, 0x90, 0x90, 0x50, 0x20, # v
	0x06, 0x00, 0x00, 0xA8, 0xA8, 0xA8, 0x50, 0x00, # w
	0x05, 0x00, 0x00, 0x90, 0x60, 0x60, 0x90, 0x00, # x
	0x05, 0x00, 0x00, 0x90, 0x90, 0x70, 0x10, 0x70, # y
	0x05, 0x00, 0x00, 0xF0, 0x20, 0x40, 0xF0, 0x00, # z
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # {
	0x02, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, # |
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # }
	0x05, 0x00, 0x00, 0x50, 0xA0, 0x00, 0x00, 0x00, # ~
])

class EnhancedFrameBuffer:
	def __init__(self, buffer, width, height, format=framebuf.MONO_HLSB):
		self.buffer = buffer
		self.width = width
		self.height = height
		fb = framebuf.FrameBuffer(buffer, width, height, framebuf.MONO_HLSB)
		self.framebuf = fb
		self.fill = fb.fill
		self.pixel = fb.pixel
		self.hline = fb.hline
		self.vline = fb.vline
		self.line = fb.line
		self.rect = fb.rect
		self.fill_rect = fb.fill_rect
		self.text = fb.text
		self.scroll = fb.scroll
		self.blit = fb.blit

	def narrowtext(self, string, x=0, y=0):
		for c in string:
			font_index = ord(c) - 0x20
			if font_index > 0x60:
				raise Error("ASCII only")
			font_char = font_index * 8
			font_width = font[font_char + 0]

			if not self._bitmap_byte(font[font_char + 1:font_char + 8], x, 1, font_width, 7):
				break

			x = x + font_width

	def bitmap(self, buffer, x, y, w, h):
		ret = False
		for i in range(w / 8):
			o = i*8
			ret = self._bitmap_byte(buffer[o:o+8],x+o,y,min(w,8),h)
		return ret

	def _bitmap_byte(self, buffer, x, y, w, h):
		num_modules = int(self.width / 8)

		split = x % 8

		# first byte
		m = int(x / 8)

		# print("Modules: %d x: %d split: %d first module: %d" % (num, x, split, m))

		if m >= num_modules:
			return False

		for cy in range(h):
			if cy + y < self.height:
				buffer_offset = ((cy + y) * num_modules) + m
				self.buffer[buffer_offset] = (buffer[cy] >> split) | self.buffer[buffer_offset]

		# possible second byte
		if split + w > 8:
			if m + 1 >= num_modules:
				return False

			hang = 8 - split
			for cy in range(h):
				if cy + y < self.height:
					buffer_offset = ((cy + y) * num_modules) + m + 1
					self.buffer[buffer_offset] = (buffer[cy] << hang) | self.buffer[buffer_offset]

		return True
