import framebuf

font = bytearray([
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # SPACE
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # !
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # "
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # #
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # $
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # %
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # &
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # '
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # (
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # )
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # *
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # +
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # ,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # -
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, # .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # /
	0x05, 0x60, 0x90, 0x90, 0x90, 0x90, 0x60, 0x00, # 0
	0x05, 0x60, 0xA0, 0x20, 0x20, 0x20, 0xF0, 0x00, # 1
	0x05, 0x60, 0x90, 0x20, 0x40, 0x80, 0xF0, 0x00, # 2
	0x05, 0x60, 0x90, 0x20, 0x20, 0x90, 0x60, 0x00, # 3
	0x05, 0x20, 0x40, 0x80, 0xA0, 0xF0, 0x20, 0x00, # 4
	0x05, 0xF0, 0x80, 0xE0, 0x10, 0x10, 0xE0, 0x00, # 5
	0x05, 0x20, 0x40, 0xE0, 0x90, 0x90, 0x60, 0x00, # 6
	0x05, 0xF0, 0x10, 0x20, 0x40, 0x80, 0x80, 0x00, # 7
	0x05, 0x60, 0x90, 0x60, 0x90, 0x90, 0x60, 0x00, # 8
	0x05, 0x60, 0x90, 0x90, 0x70, 0x10, 0x10, 0x00, # 9
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # :
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # 
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # 
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # 
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # 
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # 
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # 
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # A
	0x02, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, # B
	0x05, 0x60, 0x90, 0x80, 0x80, 0x90, 0x60, 0x00, # C
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0xE0, 0x90, 0x90, 0xE0, 0x80, 0x80, 0x00, # P
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # Z
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x70, 0x90, 0x90, 0x70, 0x00, # a
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x80, 0x80, 0xE0, 0x90, 0x90, 0x00, # h
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # 
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # z
])

class FrameBufferNarrow:
	def __init__(self, buffer, width, height, format=framebuf.MONO_HLSB):
		self.buffer = buffer
		self.width = width
		self.height = height
		fb = framebuf.FrameBuffer(buffer, width, height, framebuf.MONO_HLSB)
		self.framebuf = fb
		self.fill = fb.fill
		self.pixel = fb.pixel
		self.hline = fb.hline
		self.vline = fb.vline
		self.line = fb.line
		self.rect = fb.rect
		self.fill_rect = fb.fill_rect
		self.text = fb.text
		self.scroll = fb.scroll
		self.blit = fb.blit
		
	def narrowtext(self, string, xstart=0, ystart=0):
		num = int(self.width / 8)
		bit_index = xstart
		for c in string:
			font_index = ord(c) - 0x20
			font_char = font_index * 8
			font_width = font[font_char + 0]

			split = bit_index % 8

			# first byte
			m = int(bit_index / 8)
			
			if m >= num:
				break

			for y in range(7):
				if y + ystart < self.height:
					buffer_offset = ((y + ystart) * num) + m
					self.buffer[buffer_offset] = (font[font_char + y+1] >> split) | self.buffer[buffer_offset]

			# possible second byte
			if split + font_width > 8 and m + 1 < num:
				hang = 8 - split
				for y in range(7):
					if y + ystart < self.height:
						buffer_offset = ((y + ystart) * num) + m + 1
						self.buffer[buffer_offset] = (font[font_char + y+1] << hang) | self.buffer[buffer_offset]

			bit_index = bit_index + font_width